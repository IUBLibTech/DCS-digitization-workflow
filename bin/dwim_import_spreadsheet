#!/bin/env python
import activate_venv
import argparse
import yaml
from pathlib import Path
import sys
import logging
import re
from datetime import datetime
import getpass
import pwd

from dwim.project import Project
from dwim.profiles import load_profile
from openpyxl.reader.excel import load_workbook
from openpyxl.worksheet.worksheet import Worksheet

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", default=False, action="store_true", help="Turn on debugging")
    parser.add_argument("profile", help="digitization entity profile")
    parser.add_argument("spreadsheet", help="Spreadsheet to import")
    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO)

    profile = load_profile(args.profile)

    workbook = load_workbook(args.spreadsheet, read_only=True, data_only=True)    
    rows = []
    worksheet: Worksheet = None
    for worksheet in workbook.worksheets:
        logging.info(f"Processing {worksheet.max_row} rows in worksheet {worksheet.title}")

        # the first row has the column titles -- normalize them and map them to
        # the column number.
        keys = {}
        for c in range(1, worksheet.max_column + 1):
            x = str(worksheet.cell(1, c).value)
            if x:
                keys[c] = normalize_title(x)
                
        # grab the data and normalize that
        project = None
        last_project = {}
        for r in range(2, worksheet.max_row + 1):
            row = {}
            for c, name in keys.items():                                
                v = worksheet.cell(r, c).value
                row[name] = '' if v is None else str(v)
 
            if row['project'] != '':
                # new project.
                try:
                    project = Project(Path.cwd(), row['project'], create=False)
                    logging.info(f"Project {row['project']} already exists, will only add missing physical objects")
                    continue
                except FileNotFoundError:
                    # This is we want to happen.
                    pass

                for f in ('owner', 'email'):
                    if row[f] == '':
                        row[f] = last_project[f]
                last_project = row
                
                defaults={}
                for col, path in (('owner', 'project_information.contacts[0].name'),
                                    ('email', 'project_information.contacts[0].email'),
                                    ('callnumber', 'descriptive_metadata.identifiers.call_number'),
                                    ('catkey', 'descriptive_metadata.identifiers.iucat_catkey'),
                                    ('barcode', 'descriptive_metadata.identifiers.iucat_barcode'),
                                    ('localscope', 'descriptive_metadata.identifiers.other_identifiers[0].scope'),
                                    ('localid', 'descriptive_metadata.identifiers.other_identifiers[0].identifier'),
                                    ('title', 'descriptive_metadata.title')):
                    if row.get(col, '') != '':
                        defaults[path] = row[col]

                # inject our user.
                defaults["project_information.creator"] = getpass.getuser()
                defaults["project_information.creator_name"] = pwd.getpwnam(getpass.getuser()).pw_gecos
                defaults["project_information.create_date"] = datetime.strftime(datetime.now(), "%Y-%m-%d")


                project = Project(Path.cwd(), row['project'], create=True,
                                    defaults=defaults)

            if project and row['format']:
                # create a physical object for this row.
                defaults = {}                
                if row['project'] != '':
                    # this is a single-media object, set the title to 'SAME'
                    print(row)
                    defaults['title'] = "SAME"
                else:
                    defaults['title'] = row['title']                
                for col, path in (('comments', 'physical_details.comments'),):
                    if row.get(col, '') != '':
                        defaults[path] = row[col]
                po_config = profile.get_po_config(row['format'])
                phy_name = po_config.id_pattern.format_map(row)

                project.add_physical_object(profile, phy_name, row['format'], defaults=defaults)


def normalize_title(text: str):
    """Convert a spreadsheet column name to where it maps in the grand scheme of things"""
    return text.strip().lower().translate({ord(x): None for x in " -_.\"'"})
    

if __name__ == "__main__":
    main()

